<?xml version="1.0" encoding="utf-8"?>
<!-- 
Copyright (c) <2009> <Newloop>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" horizontalAlign="left" applicationComplete="init()">
<mx:Script> <![CDATA[
	import mx.formatters.NumberFormatter;
	import mx.collections.ArrayCollection;
	import mx.formatters.DateFormatter;
	import mx.controls.ComboBox;
	import __AS3__.vec.Vector;
	import mx.events.ModuleEvent;
	import com.newloop.util.events.DebugEvent;
	import com.newloop.air.moduleloading.*;
	import com.newloop.air.events.AirUpdateManagerEvent;
	import com.newloop.util.events.DebugEvent;


//--------------------------------------
// CLASS CONSTANTS
//--------------------------------------
private const __file_name__:String = "remoteModuleTest.mxml";
//--------------------------------------
//  CONSTRUCTOR
//--------------------------------------

/**
 *	@Constructor
 */
public function init():void{
	// maximize window
	stage.nativeWindow.maximize();
	this.runTests();
}

//--------------------------------------
//  PRIVATE VARIABLES
//--------------------------------------


private var moduleDescriptionIterator:ModuleDescriptionIterator;

//--------------------------------------
//  GETTER/SETTERS
//--------------------------------------

//--------------------------------------
//  PUBLIC METHODS
//--------------------------------------

//--------------------------------------
//  EVENT HANDLERS
//--------------------------------------
		

// if you don't want to report debug events then deregister from listening for them

private function debugEventHandler(e:DebugEvent):void{
	var debugMessage:String = e.message;
	this.updateTextOutput("Debug",e.sourceFile,debugMessage);
}

// reports to screen what's happening - events come from the moduleChainLoader
private function moduleProgressUpdateHandler(e:ModuleEvent):void{
	var progressMessage:String = e.errorText;
	this.updateTextOutput("Progress","non debug",progressMessage);
}

// reports to screen what's happening - events come from the moduleChainLoader
private function moduleLoadingErrorHandler(e:ModuleEvent):void{
	this.updateTextOutput("Error","non debug",e.errorText);
}

// xml has been loaded and parsed - now send it to the loader
private function moduleXMLLoadedHandler(e:Event):void{
	this.updateTextOutput("Info",__file_name__,"Module specification loaded");
	
	var moduleXMLLoader:ModuleXMLLoader = e.target as ModuleXMLLoader;
	
	var moduleDescriptionVector:Vector.<ModuleDescription> = moduleXMLLoader.getModuleDescriptionVector();
	
	this.loadModules(moduleDescriptionVector)
}

// loading has finished - now run some tests on the loaded modules
private function moduleLoadingCompleteHandler(e:ModuleEvent):void{
	//
	var moduleChainLoader:ModuleChainLoader = e.target as ModuleChainLoader;

	this.updateTextOutput("Info",__file_name__,"Loading of all modules complete...");
	  
	var moduleDictionary:ModuleDictionary = moduleChainLoader.getModuleDictionary();
	
	this.createModuleTestInterface(moduleDictionary);
   
}

// handles selection of loaded modules in the test combo
private function moduleComboCloseHandler(e:Event):void{
	
    var comboBox:ComboBox = e.target as ComboBox;
	var dataObj:Object = comboBox.selectedItem;
	var moduleName:String = dataObj.label;
	var moduleContent:Object = dataObj.data;
	
	this.testModule(moduleName, moduleContent);
	
}


// browse handler for picking up the initial xml file
private function browseForFileHandler(event:Event) :void{
	var xmlFile:File = new File(File(event.target).nativePath);
	this.loadModuleXMLData(xmlFile.url);
};

//--------------------------------------
//  PRIVATE & PROTECTED INSTANCE METHODS
//--------------------------------------

// initial function run on startup

private function runTests():void{
	this.browseForFile();
}


// offers the user a browse window - find the xml file where your moduleData is stored
private function browseForFile():void{
	var xmlFilter:FileFilter = new FileFilter("xml files", "*.xml");
	
	var browseFile:File = new File();
	browseFile.addEventListener(Event.SELECT, this.browseForFileHandler);
	browseFile.browse([xmlFilter]);
}

// load that moduleData xml
private function loadModuleXMLData(filePath:String):void{
	
	var moduleXMLLoader:ModuleXMLLoader = new ModuleXMLLoader();
	moduleXMLLoader.addEventListener(DebugEvent.DEBUG_MESSAGE, debugEventHandler);	
	moduleXMLLoader.addEventListener(Event.COMPLETE, moduleXMLLoadedHandler);
	
	moduleXMLLoader.loadData(filePath);
	
}
// run the actual module loader

private function loadModules(moduleDescriptionVector:Vector.<ModuleDescription>):void{
    
	this.moduleDescriptionIterator = new ModuleDescriptionIterator(moduleDescriptionVector);
	
	var moduleChainLoader:ModuleChainLoader = new ModuleChainLoader(this.moduleDescriptionIterator);
	
//	moduleChainLoader.addEventListener(ModuleEvent.STATUS, );
//	moduleChainLoader.addEventListener(ModuleEvent.MODULES_READY, );
	moduleChainLoader.addEventListener(ModuleEvent.PROGRESS, this.moduleProgressUpdateHandler);
	moduleChainLoader.addEventListener(ModuleEvent.READY, this.moduleLoadingCompleteHandler);
	moduleChainLoader.addEventListener(ModuleEvent.ERROR, this.moduleLoadingErrorHandler);
	// once the application is developed you'd want to stop listening for these events
	moduleChainLoader.addEventListener(DebugEvent.DEBUG_MESSAGE, this.debugEventHandler);
	
	moduleChainLoader.startLoadingModules();
}

// updates ComboBox to hold the modules so we can run tests on them
private function createModuleTestInterface(moduleDictionary:ModuleDictionary):void{
	
	var moduleKeysVector:Vector.<String> = moduleDictionary.keysVector;
	
	var loadedModulesStr:String = moduleKeysVector.toString();
	
	this.updateTextOutput("Info",__file_name__,"LOADED MODULES: " + loadedModulesStr);
	
	
	var dpArray:Array = [];
	
	var iLength:uint = moduleKeysVector.length;
	for (var i:uint = 0; i<iLength; i++){
		var nextModuleName:String = moduleKeysVector[i];
		var o:Object = {};
		o.label = nextModuleName;
		
		var nextModule:ITestableModule = moduleDictionary.getModule(nextModuleName);
		
		if(nextModule != null){
			o.data = nextModule;
		} else {
			o.data = moduleDictionary.getSandboxedModule(nextModuleName);
		}
		
		dpArray.push(o);
	}
	
	
	moduleCombo.dataProvider = dpArray;
	
	moduleCombo.addEventListener(Event.CLOSE, this.moduleComboCloseHandler);
	
}

/* runs two tests on the selected module:
  1: Attempts to load library assets passed from a function
  2: Attempts to create a directory on the user's desktop
  Test 1 should pass on all loaded modules - you should see the library element on the stage
  Test 2 should pass on the securely loaded modules, and fail on modules outside the application sandbox
*/
private function testModule(moduleName:String, moduleContent:Object):void{
	
	this.updateTextOutput("Info",__file_name__,"SELECTED MODULE: " + moduleName + " -> " + moduleContent.toString());
	
	if(moduleContent is ITestableModule){
		this.updateTextOutput("Info",__file_name__,"ATTACHING MC FROM: " + moduleName);
		var testableModule:ITestableModule = moduleContent as ITestableModule;
		var testMC:MovieClip = testableModule.createTestMC();
		if (testMC){
			testMC.x = 650;
			testMC.y = 200;
			this.addChild(testMC);
		}
		
	} else {
		try {
			this.updateTextOutput("Info",__file_name__,"ATTACHING SERIALISED MC FROM: " + moduleName);
			var serialisedMC:MovieClip = moduleContent["createTestMC"]() as MovieClip;
			if (serialisedMC){
				serialisedMC.x = 650;
				serialisedMC.y = 200;
				this.addChild(serialisedMC);
			}
			
		} catch (e:Error){
			this.updateTextOutput("Error",e.message + " -> " + "While attempting to run 'createTestMC' on " + moduleName);
		}
	}
	
	
	try{
		var directoryPath:String = moduleContent["attemptToAccessFileSystem"]();
		this.updateTextOutput("Info",__file_name__,"Wrote directory from: " + moduleName + " -> " + directoryPath); 
	} catch(e:Error){
		// this error SHOULD be thrown in the case of non secure modules... it shows that the unsafe content cannot access the filesystem
		this.updateTextOutput("ERROR",__file_name__,e.message + " -> " + "While attempting to create directory from " + moduleName);
	}
}

[Bindable]private var logData:ArrayCollection = new ArrayCollection();
// utility function that updates the text window from the top.
private function updateTextOutput(typ:String,sFile:String,msg:String):void{
	var time:Date = new Date();
	var formatD:DateFormatter = new DateFormatter();
	formatD.formatString = "JJ:NN:SS:";
	var outS:String = formatD.format(time);

	var msec:int = time.milliseconds;
	outS += ((msec<100)?"0":"")+((msec<10)?"0":"")+msec;
	
	logData.addItem({type:typ,source:sFile,message:msg,timestamp:outS});
}



//--------------------------------------
//  UNIT TESTS
//--------------------------------------


]]> </mx:Script>
<mx:HBox>
<mx:Label text="Test module:"/>
<mx:ComboBox id="moduleCombo" 	width="150"/>
</mx:HBox>
<mx:DataGrid id="logGrid" dataProvider="{logData}" width="50%" height="100%">
	<mx:columns>
		<mx:DataGridColumn dataField="type" headerText="Type" minWidth="70"/>
		<mx:DataGridColumn dataField="source" headerText="Source" minWidth="180"/>
		<mx:DataGridColumn dataField="message" headerText="Message" width="400"/>
		<mx:DataGridColumn dataField="timestamp" headerText="Time" minWidth="60"/>
	</mx:columns>
</mx:DataGrid>

</mx:WindowedApplication>
