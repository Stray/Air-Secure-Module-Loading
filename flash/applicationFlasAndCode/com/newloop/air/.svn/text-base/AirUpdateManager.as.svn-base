/*****************************************************************************           c ''''''''''''''''''''''''''''''''''''''''''''''''' c         c  cccccccccccccccccccccccccc cccccccccccccccccccccccc  c        c  ccc@@@@cccc@@@@cc@ccc@ccc@c ccc    ccc    cccc    ccc  c       c  ccc@cccc@cc@ccc@@c@ccc@ccc@c cc cccc c cccc cc cccc ccc  c       c  ccc@cccc@c@ccc@@cc@ccc@ccc@c c cccccc cccccc c cccc ccc  c       c  ccc@cccc@cc@cccccc@ccc@ccc@c cc cccc c cccc cc cccc ccc  c        c  cc@cccc@ccc@@@@ccc@@@c@@@cc ccc    ccc    ccc ccc ccc  c         c  cccccccccccccccccccccccccccccccccccccccccccc cccccc  c           c ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, c© NewLoop Ltd: 020 7702 3130Author Lindsey Fallow: lindz@btinternet.com****************************************************************************                       CLASS DESCRIPTION AND DEFINITION            *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *          ****************************************************************************        Code Conventions:        Class        verbMethod        nounProperty        _nounProperty = simple property relating directly to MovieClip properties (height, width etc)        isBoolean        onCallback        _mc = MovieClip        _txt = TextField        _arr = Array        _str = String        tVariableName = temporary variable for calculation or data handling purposes*****************************************************************************/package com.newloop.air{	import com.newloop.air.events.AirUpdateManagerEvent;	import com.yahoo.astra.fl.managers.AlertManager;		import fl.controls.Button;		import flash.desktop.Updater;		import flash.display.DisplayObject;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;		import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;		import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;		//import mx.controls.Alert;	//import mx.events.CloseEvent;					/**	 * AirUpdateManager handles compulsory and optional updates to Air Applications	 * 	 * <p>The class relies on a remote xml file containing the version information.</p>	 * <p>The structure of the remote xml file is : </p>	 * <p><code>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;<br>	 * &lt;currentVersion&gt;<br>	 * &lt;version&gt;2.2&lt;/version&gt;<br>	 * &lt;downloadLocation&gt;&lt;![CDATA[http://www.yourdomain.com/AIR/UMTest/UM.air]]&gt;&lt;/downloadLocation&gt;<br>     * &lt;forceUpdate&gt;false&lt;/forceUpdate&gt;<br>     * &lt;message&gt;&lt;![CDATA[Added new features]]&gt;&lt;/message&gt;<br>     * &lt;/currentVersion&gt;</code></p>	 * 	 * @author lindseyf	 * 	 */		public class AirUpdateManager extends EventDispatcher	{				private var isAutoCheck:Boolean;		private var downloadLocation:String;		private var isForceUpdate:Boolean;		private var updateMessage:String;		private var displayTarget:DisplayObject;		private var dataPath:String;				/**   		 * Current version of the AIR Application   		 */		public var currentVersion:String;						/**		 * Creates a new AirUpdateManager instance.  After creating the AirUpdateManager listen for the AirUpdateManagerEvent events.		 * 		 * @param displayTargetObj - A display object to be used as the container for the alert.		 * @param versionXmlUrl - The path to the version.xml file. 		 * @param isAutoCheck - If true, the update manager performs the check immediately.		 * 		 */				public function AirUpdateManager(displayTargetObj:DisplayObject, versionXmlUrl:String, isAutoCheck:Boolean = true)		{						this.displayTarget = displayTargetObj;			this.dataPath = versionXmlUrl;			if(isAutoCheck){				this.loadData(this.dataPath);			}		}				/**		 * Runs a manual check for an available update. 		 * 		 */				public function checkForUpdate():void{			this.loadData(this.dataPath);		}				private function loadData(dataPath:String):void {			trace("AIR update manager dataPath : " + dataPath);			var phpURLRequest:URLRequest = new URLRequest(dataPath);			//			var myLoader:URLLoader = new URLLoader();			myLoader.load(phpURLRequest);			myLoader.addEventListener(Event.COMPLETE, this.completeHandler);			myLoader.addEventListener(IOErrorEvent.IO_ERROR, this.loadErrorHandler);		}				private function completeHandler(event:Event):void {			var loader:URLLoader = URLLoader(event.target);			trace("loader.data : " + loader.data);			var versionXML:XML = new XML(loader.data);			trace("versionXML : " + versionXML.toString());			this.currentVersion = versionXML.version;			this.downloadLocation = versionXML.downloadLocation;			this.isForceUpdate = Boolean(versionXML.forceUpdate=="true");			this.updateMessage = versionXML.message;						this.checkVersionNumber();		}				private function loadErrorHandler(event:IOErrorEvent):void{						// pretend there is no update required			var e:AirUpdateManagerEvent = new AirUpdateManagerEvent(AirUpdateManagerEvent.NO_UPDATE);			this.dispatchEvent(e);					}				private function checkVersionNumber():void{						var appVersion_num:Number = AirUtilities.getApplicationVersionNumber();			var currentVersion_num:Number = Number(this.currentVersion);			trace("currentVersion : " + this.currentVersion);			trace("appVersion_num : " + appVersion_num);			trace("currentVersion_num : " + currentVersion_num);						if(appVersion_num<currentVersion_num){				this.displayDialog();			} else {				var e:AirUpdateManagerEvent = new AirUpdateManagerEvent(AirUpdateManagerEvent.NO_UPDATE);				this.dispatchEvent(e);			}					}				private function displayDialog():void{			trace("display update dialog");			var buttonArray:Array = ["Later", "Update"];			var alertTitle:String = "Update available";			if(this.isForceUpdate){				buttonArray = ["Quit", "Update"];				alertTitle = "Update required";			} 						AlertManager.createAlert(this.displayTarget, this.updateMessage, alertTitle, buttonArray, this.alertHandler);								}				private function alertHandler(e:MouseEvent):void{			var btn:Button = e.currentTarget as Button;			trace("btn : " + btn);			var choice:String = btn.name;						if(choice=="Update"){			 	// run the update			 	this.runUpdate();			} else {				// run the handler function				this.cancelUpdate();			}		}						private function runUpdate():void{			var e:AirUpdateManagerEvent = new AirUpdateManagerEvent(AirUpdateManagerEvent.ACCEPT_UPDATE);			this.dispatchEvent(e);			this.downloadFile();		}				private function cancelUpdate():void {			trace("cancelUpdate");			var e:AirUpdateManagerEvent;			if(this.isForceUpdate){				e = new AirUpdateManagerEvent(AirUpdateManagerEvent.REFUSE_UPDATE);			} else {				e = new AirUpdateManagerEvent(AirUpdateManagerEvent.SKIP_UPDATE);			}			this.dispatchEvent(e);		}				private function downloadFile():void {			trace("downloading file : " + this.downloadLocation);			var request:URLRequest = new URLRequest(this.downloadLocation);			var loader:URLLoader = new URLLoader();			loader.dataFormat = URLLoaderDataFormat.BINARY;			loader.load(request);			loader.addEventListener(Event.COMPLETE, this.writeFileToSystem);			loader.addEventListener(ProgressEvent.PROGRESS, this.updateProgressHandler);			loader.addEventListener(IOErrorEvent.IO_ERROR, this.errorHandler);		}				private function errorHandler(e:Event):void{			this.dispatchEvent(new AirUpdateManagerEvent(AirUpdateManagerEvent.DOWNLOAD_ERROR));		}				private function writeFileToSystem(e:Event):void {			trace("writing file");			try {				// get the last bit of the file path - this is the file name				var filename:String = this.downloadLocation.split("/").pop() as String;				var file:File = File.documentsDirectory.resolvePath(filename);				var stream:FileStream = new FileStream();				stream.open(file, FileMode.WRITE);				stream.writeBytes(e.target.data);				stream.close();				this.dispatchEvent(new AirUpdateManagerEvent(AirUpdateManagerEvent.DOWNLOAD_COMPLETE));				trace("wrote file");				this.installUpdate(file);			} catch (error:Error) {				trace('failed to write: ' + error);				this.dispatchEvent(new AirUpdateManagerEvent(AirUpdateManagerEvent.DOWNLOAD_ERROR));			}		}				private function updateProgressHandler(e:ProgressEvent):void{						var percentage:Number = Math.round(100*(e.bytesLoaded / e.bytesTotal));			trace("percentage : " + percentage);			this.dispatchEvent(new AirUpdateManagerEvent(AirUpdateManagerEvent.DOWNLOAD_PROGRESS,percentage));		}				private function installUpdate(file:File):void{			trace("install update");			var updater:Updater = new Updater();			updater.update(file,this.currentVersion);		}			}}