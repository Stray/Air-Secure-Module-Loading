/*****************************************************************************           c ''''''''''''''''''''''''''''''''''''''''''''''''' c         c  cccccccccccccccccccccccccc cccccccccccccccccccccccc  c        c  ccc@@@@cccc@@@@cc@ccc@ccc@c ccc    ccc    cccc    ccc  c       c  ccc@cccc@cc@ccc@@c@ccc@ccc@c cc cccc c cccc cc cccc ccc  c       c  ccc@cccc@c@ccc@@cc@ccc@ccc@c c cccccc cccccc c cccc ccc  c       c  ccc@cccc@cc@cccccc@ccc@ccc@c cc cccc c cccc cc cccc ccc  c        c  cc@cccc@ccc@@@@ccc@@@c@@@cc ccc    ccc    ccc ccc ccc  c         c  cccccccccccccccccccccccccccccccccccccccccccc cccccc  c           c ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, c© NewLoop Ltd: 020 7702 3130Author Lindsey Fallow: lindz@btinternet.com****************************************************************************                       CLASS DESCRIPTION AND DEFINITION            *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *          ****************************************************************************        Code Conventions:        Class        verbMethod        nounProperty        _nounProperty = simple property relating directly to MovieClip properties (height, width etc)        isBoolean        onCallback        _mc = MovieClip        _txt = TextField        _arr = Array        _str = String        tVariableName = temporary variable for calculation or data handling purposes*****************************************************************************/package com.newloop.util{	//	import com.newloop.array.ArrayProbe;	import com.newloop.util.DateFormat;	//	public class DateUtilities {		//		//                               **** DEFINE VARIABLES ****		//		public static const YMD:DateFormat = new DateFormat("YMD");		//		public static const DMY:DateFormat = new DateFormat("DMY");				//		public static const MDY:DateFormat = new DateFormat("MDY");		//		//		//                                    **** CONSTRUCTOR ****		//		public function DateUtilities() {			//			//		}		//		//		//                                    **** PUBLIC FNS ****		//		//		//		public static function dateFromString(dateString:String,dateStringDescriptor:DateFormat,dateSeparator:String = '-'):Date {			//			// date string - eg "2007-08-21"			// dateStringDescriptor - Date forma			// dateSeparator - eg "-"			//			//			var date_arr:Array=dateString.split(dateSeparator);			//			var dateDescriptor:String = dateStringDescriptor.getDateString();			//			var dateObj:Object=new Object();			//			var iLength:uint=date_arr.length;			for (var i:uint=0; i < iLength; i++) {				dateObj[dateDescriptor.charAt(i)]=Number(date_arr[i]);			}			//			var d:Date=new Date(dateObj.Y,dateObj.M-1,dateObj.D);			//			return d;		}				public static function dateTimeFromString(dateTimeString:String, dateStringDescriptor:DateFormat, dateSeparator:String, timeSeparator:String):Date{					var dateTime_arr:Array = dateTimeString.split(" ");						var d:Date = dateFromString(dateTime_arr[0], dateStringDescriptor, dateSeparator);						var time_arr:Array = dateTime_arr[1].split(timeSeparator);						d.hours = Number(time_arr[0]);			d.minutes = Number(time_arr[1]);			d.seconds = Number(time_arr[2]);						return d;		}				public static function timeFromString(timeString:String, timeSeparator:String):Date {			var d:Date = new Date(0);						var time_arr:Array = timeString.split(timeSeparator);						d.hours = Number(time_arr[0]);			d.minutes = Number(time_arr[1]);			d.seconds = Number(time_arr[2]);						return d;		}		//		public static function dateToHoursAndMinutes(d:Date, isAbbreviated:Boolean = false):String{						var milliseconds:Number = d.time;						var seconds:Number = milliseconds / 1000;						var minutes:Number = seconds / 60;						var hours:Number = minutes / 60;						minutes -=(Math.floor(hours)*60);						var hoursStr:String = " hours ";			var minsStr:String = " minutes";						if(isAbbreviated){				hoursStr = " h ";				minsStr = " m";			}						var timeString:String = String(Math.floor(hours))+ hoursStr;			timeString+= String(Math.round(minutes)) + minsStr;						return timeString;		}				public static function dateToString(d:Date, separator:String, isIncludeTime:Boolean = false):String{						if(d == null){				return "";			}						var year:String = String(d.fullYear).substr(2,2);			var month:String = String(d.month + 1);			var day:String = String(d.date);						if(month.length<2){				month = "0" + month;			}			if(day.length<2){				day = "0" + day;			}						var arr:Array = [day, month, year];			var str:String = arr.join(separator);						if(isIncludeTime){				str += " ";				str += d.toTimeString().substr(0,5);			}						return str;		}				public static function dateToYMDString(d:Date, separator:String = "-"):String{						if(d == null){				return "";			}						var year:String = String(d.fullYear);			var month:String = String(d.month + 1);			var day:String = String(d.date);						if(month.length<2){				month = "0" + month;			}			if(day.length<2){				day = "0" + day;			}						var arr:Array = [year, month, day];			var str:String = arr.join(separator);						return str;		}				//		public function destroy():Boolean {			// destroy this and any child clips, or don't			// defaults to not allowing destruction			return false;		}		//		public function debug():void {			trace('');			trace('debugging in : ' + this);			//			trace('             > ');		}		//		//                                    **** PRIVATE FNS ****		//	}}//