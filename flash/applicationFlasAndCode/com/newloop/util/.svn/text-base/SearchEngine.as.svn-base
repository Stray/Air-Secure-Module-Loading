/*****************************************************************************           c ''''''''''''''''''''''''''''''''''''''''''''''''' c         c  cccccccccccccccccccccccccc cccccccccccccccccccccccc  c        c  ccc@@@@cccc@@@@cc@ccc@ccc@c ccc    ccc    cccc    ccc  c       c  ccc@cccc@cc@ccc@@c@ccc@ccc@c cc cccc c cccc cc cccc ccc  c       c  ccc@cccc@c@ccc@@cc@ccc@ccc@c c cccccc cccccc c cccc ccc  c       c  ccc@cccc@cc@cccccc@ccc@ccc@c cc cccc c cccc cc cccc ccc  c        c  cc@cccc@ccc@@@@ccc@@@c@@@cc ccc    ccc    ccc ccc ccc  c         c  cccccccccccccccccccccccccccccccccccccccccccc cccccc  c           c ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, c© NewLoop Ltd: 020 7702 3130Author Lindsey Fallow: lindz@btinternet.com****************************************************************************                       CLASS DESCRIPTION AND DEFINITION            *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *                      *                                                     *          ****************************************************************************        Code Conventions:        Class        verbMethod        nounProperty        _nounProperty = simple property relating directly to MovieClip properties (height, width etc)        isBoolean        onCallback        _mc = MovieClip        _txt = TextField        _arr = Array        _str = String        tVariableName = temporary variable for calculation or data handling purposes*****************************************************************************/package com.newloop.util{	//	import com.newloop.util.StringUtilities;	//	public class SearchEngine {		//		//                               **** DEFINE VARIABLES ****		//		//		//                                    **** CONSTRUCTOR ****		//		public function SearchEngine() {			//			//		}		//		//		//                                    **** PUBLIC FNS ****		//		//		//		public static function runSearch(subjectString:String, andWordsArray:Array, orWordsArray:Array = null, notWordsArray:Array = null):Boolean {			//			trace("subjectString = " + subjectString);			//			var iLength:uint;			// test for words which must ALL be found			if (andWordsArray!=null) {				iLength = andWordsArray.length;				for (var i:uint = 0; i<iLength; i++) {					//					var nextWord:String = andWordsArray[i];					//					//					if (!(SearchEngine.containsWord(subjectString, nextWord))) {						//						trace("failed AND test : " + nextWord);						//						return false;					}				}			}			// test for words of which one OR more must be found			if (orWordsArray!=null) {				if (!(SearchEngine.containsAnyWord(subjectString, orWordsArray))) {					trace("failed OR test");					return false;				}			}			// test for words which must NOT be found			if (notWordsArray!=null) {				if (SearchEngine.containsAnyWord(subjectString, notWordsArray, false)) {					trace("failed NOT test");					return false;				}			}			// test for PHRASES which must be found			// phrase search should be performed by truncating the expression into an entry in the andWordsArray parameter			trace("passed SearchEngine.runSearch");			return true;			//		}		//		//		public static function containsWord(subjectString:String, searchWord:String):Boolean {						searchWord = StringUtilities.removeExtraWhitespace(searchWord);						if (!StringUtilities.hasText(searchWord)) {				trace("blank search term");				return true;			}			var testString:String = "(\\b"+searchWord+"\\b)+";			//			var andTest:RegExp=new RegExp(testString, "i");			//			return andTest.test(subjectString);		}		//		public static function containsAnyWord(subjectString:String, orWordsArray:Array, defaultValue:Boolean = true):Boolean {			var orWordsTestString:String = "(\\b(";			var iLength:uint = orWordsArray.length;			for (var i:uint=0; i<iLength; i++) {				var nextWord:String = orWordsArray[i];								nextWord = StringUtilities.removeExtraWhitespace(nextWord);				//				if (StringUtilities.hasText(nextWord)) {					orWordsTestString += "("+nextWord+")";					if (i<(iLength-1)) {						//						orWordsTestString += "|";						//					}				} else {					trace("blank OR search term");				}			}			if(orWordsTestString == "(\\b("){				// we haven't found any meaningful searches				return defaultValue;			}			orWordsTestString += ")\\b)+";			var orTest:RegExp = new RegExp(orWordsTestString, "i");			return orTest.test(subjectString);		}		//		//                                    **** PRIVATE FNS ****		//	}}//